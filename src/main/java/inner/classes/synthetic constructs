Implicit and Synthetic Parameters
Certain constructs are implicitly declared in the source code if they have not been written explicitly. For example, 
the ExampleMethods example does not contain a constructor. A default constructor is implicitly declared for it. 
The MethodParameterSpy example prints information about the implicitly declared constructor of ExampleMethods:

Number of declared constructors: 1
public ExampleMethods()
Consider the following excerpt from MethodParameterExamples:

public class MethodParameterExamples {
    public class InnerClass { }
}
The class InnerClass is a non-static nested class or inner class. 
A constructor for inner classes is also implicitly declared.
However, this constructor will contain a parameter.
When the Java compiler compiles InnerClass, it creates a .class file that represents code similar to the following:

public class MethodParameterExamples {
    public class InnerClass {
        final MethodParameterExamples parent;
        InnerClass(final MethodParameterExamples this$0) {
            parent = this$0; 
        }
    }
}
The InnerClass constructor contains a parameter whose type is the class that encloses InnerClass, 
which is MethodParameterExamples. Consequently, the example MethodParameterExamples prints the following:

public MethodParameterExamples$InnerClass(MethodParameterExamples)
         Parameter class: class MethodParameterExamples
          Parameter name: this$0
               Modifiers: 32784
            Is implicit?: true
        Is name present?: true
           Is synthetic?: false
Because the constructor of the class InnerClass is implicitly declared, its parameter is implicit as well.

Note:

The Java compiler creates a formal parameter for the constructor of an inner class to enable the compiler to pass a reference 
(representing the immediately enclosing instance) from the creation expression to the member class's constructor.
The value 32784 means that the parameter of the InnerClass constructor is both final (16) and implicit (32768).
The Java programming language allows variable names with dollar signs ($); however, by convention, dollar signs are not used in variable names.
Constructs emitted by a Java compiler are marked as synthetic if they do not correspond to a construct declared explicitly or implicitly in source code, unless they are class initialization methods. Synthetic constructs are artifacts generated by compilers that vary among different implementations. Consider the following excerpt from MethodParameterExamples:

public class MethodParameterExamples {
    enum Colors {
        RED, WHITE;
    }
}
When the Java compiler encounters an enum construct, it creates several methods that are compatible with the .class file 
structure and provide the expected functionality of the enum construct. For example, the Java compiler would create a .class 
file for the enum construct Colors that represents code similar to the following:

final class Colors extends java.lang.Enum<Colors> {
    public final static Colors RED = new Colors("RED", 0);
    public final static Colors BLUE = new Colors("WHITE", 1);
 
    private final static values = new Colors[]{ RED, BLUE };
 
    private Colors(String name, int ordinal) {
        super(name, ordinal);
    }
 
    public static Colors[] values(){
        return values;
    }
 
    public static Colors valueOf(String name){
        return (Colors)java.lang.Enum.valueOf(Colors.class, name);
    }
}
The Java compiler creates three constructors and methods for this enum construct: Colors(String name, int ordinal), Colors[] values(),
 and Colors valueOf(String name). The methods values and valueOf are implicitly declared. Consequently, their formal parameter names are 
 implicitly declared as well.

The enum constructor Colors(String name, int ordinal) is a default constructor and it is implicitly declared. 
However, the formal parameters of this constructor (name and ordinal) are not implicitly declared. Because these formal parameters
 are neither explicitly or implicitly declared, they are synthetic. (The formal parameters for the default constructor of an enum 
 construct are not implicitly declared because different compilers need not agree on the form of this constructor; 
 another Java compiler might specify different formal parameters for it. When compilers compile expressions that 
 use enum constants, they rely only on the public static fields of the enum construct, which are implicitly declared, 
 and not on their constructors or how these constants are initialized.)

Consequently, the example MethodParameterExample prints the following about the enum construct Colors:

enum Colors:

Number of constructors: 0

Number of declared constructors: 1

Declared constructor #1
private MethodParameterExamples$Colors()
         Parameter class: class java.lang.String
          Parameter name: $enum$name
               Modifiers: 4096
            Is implicit?: false
        Is name present?: true
           Is synthetic?: true
         Parameter class: int
          Parameter name: $enum$ordinal
               Modifiers: 4096
            Is implicit?: false
        Is name present?: true
           Is synthetic?: true

Number of methods: 2

Method #1
public static MethodParameterExamples$Colors[]
    MethodParameterExamples$Colors.values()
             Return type: class [LMethodParameterExamples$Colors;
     Generic return type: class [LMethodParameterExamples$Colors;

Method #2
public static MethodParameterExamples$Colors
    MethodParameterExamples$Colors.valueOf(java.lang.String)
             Return type: class MethodParameterExamples$Colors
     Generic return type: class MethodParameterExamples$Colors
         Parameter class: class java.lang.String
          Parameter name: name
               Modifiers: 32768
            Is implicit?: true
        Is name present?: true
           Is synthetic?: false
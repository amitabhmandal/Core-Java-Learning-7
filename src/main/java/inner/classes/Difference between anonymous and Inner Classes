Difference between Normal/Regular class and Anonymous Inner class:

POINT 1:
A normal class can implement any number of interfaces but anonymous inner class can 
implement only one interface at a time.

POINT 2:
A regular class can extend a class and implement any number of interface simultaneously. 
But anonymous Inner class can extend a class or can implement an interface but not both at a time.

POINT 3:
For regular/normal class, we can write any number of constructors but we cant write any constructor 
for anonymous Inner class because anonymous class does not have any name and while defining constructor 
class name and constructor name must be same.


Note that you can declare the following in anonymous classes:

Fields
Extra methods (even if they do not implement any methods of the supertype)
Instance initializers
Local classes
However, constructors can not be declared in an anonymous class


Like local classes, anonymous classes can capture variables; they have the same access to local 
variables of the enclosing scope:

An anonymous class has access to the members of its enclosing class.
An anonymous class cannot access local variables in its enclosing scope that are not declared as final or 
effectively final.
Like a nested class, a declaration of a type (such as a variable) in an anonymous class shadows any
 other declarations in the enclosing scope that have the same name.
 
================================================================
Difference between static and inner(non-static nested) classes
==============================================================
Static nested classes do not directly have access to other members(non-static variables and methods) of 
the enclosing class because as it is static, it must access the non-static members of its enclosing 
class through an object. That is, it cannot refer to non-static members of its enclosing class directly. 
Because of this restriction, static nested classes are seldom used.

Non-static nested classes (inner classes) has access to all members(static and non-static variables 
and methods, including private) of its outer class and may refer to them directly in the same way that 
other non-static members of the outer class do.




 
 
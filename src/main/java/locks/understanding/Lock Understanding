It has two important 
1. Lock Interface
2. ReentrantLock

Lock object is similar to implicit lock acquired by a thread to execute synchronized method or block.

Lock implementations provide more extensive operations than traditional locks

Important methods of Lock Interface
1. void lock(); 
If lock is available then immediately current thread will get that lock
If the lock is not available then it will continue to wait until getting the lock

It is exactly the same behavior of traditional synchronized keyword.

2. 
boolean tryLock()
Acquires the lock only if it is free at the time of invocation.
Acquires the lock if it is available and returns immediately with the value true. If the lock is not available then this method will return immediately with the value false.

A typical usage idiom for this method would be:

      Lock lock = ...;
      if (lock.tryLock()) {
          try {
              // manipulate protected state
          } finally {
              lock.unlock();
          }
      } else {
          // perform alternative actions
      }
 
This usage ensures that the lock is unlocked if it was acquired, and doesn't try to unlock if the lock was not acquired.
In this case thread never enters into waiting state.


3. void unlock()
Releases the lock.
Implementation Considerations

A Lock implementation will usually impose restrictions on which thread can release a lock 
(typically only the holder of the lock can release it) and may throw an (unchecked) exception if 
the restriction is violated. Any restrictions and the exception type must be documented by that 
Lock implementation.

4. boolean tryLock(long time,
              TimeUnit unit)
                throws InterruptedException
Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted.
If the lock is available this method returns immediately with the value true. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:

The lock is acquired by the current thread; or
Some other thread interrupts the current thread, and interruption of lock acquisition is supported; or
The specified waiting time elapses
If the lock is acquired then the value true is returned.

If the current thread:

has its interrupted status set on entry to this method; or
is interrupted while acquiring the lock, and interruption of lock acquisition is supported,
then InterruptedException is thrown and the current thread's interrupted status is cleared.
If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all.


5. void lockInterruptibly()
                       throws InterruptedException
Acquires the lock unless the current thread is interrupted.
Acquires the lock if it is available and returns immediately.

If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens:

The lock is acquired by the current thread; or
Some other thread interrupts the current thread, and interruption of lock acquisition is supported.
If the current thread:

has its interrupted status set on entry to this method; or
is interrupted while acquiring the lock, and interruption of lock acquisition is supported,
then InterruptedException is thrown and the current thread's interrupted status is cleared.


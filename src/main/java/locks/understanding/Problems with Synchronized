1. Performance Problems

2. Deadlocks created with Synchronized

3. With synchronized keyword we would have to wait for the lock. 
We don't have the following type of flexibility
if(object.tryLock()){
	Safe Operations();
} else {
	AlternateOperations();
}

Since there is no deadlock as we dont have to wait, which is resolved by the java.util.concurrent lock 
package

4. Fairness policy is not present in the synchronized locks.
Thus if we want the longest waiting thread has to get the lock then that is possible in locks API but not
in synchronized API.

5. If we want to find out how many waiting threads to get the lock. In case of traditional synchronized
keyword we cannot find that.

6. Synchronized definition 
1. Synchronized method or synchronized block.
Across multiple methods synchronized is not much helpful if we want to lock specific portion of the code
of the code. For instance if we want to lock critical section of m2() method
m1() -> m2() -> m3() -> m4()



